{"version":3,"sources":["App.tsx","index.tsx"],"names":["App","state","pressedKey","componentWillUnmount","document","removeEventListener","saveKeyDown","event","setState","key","addEventListener","this","className","React","Component","ReactDOM","render","getElementById"],"mappings":"oNAMaA,EAAb,4MACEC,MAAyB,CACvBC,WAAY,IAFhB,EASEC,qBAAuB,WACrBC,SAASC,oBAAoB,UAAW,EAAKC,cAVjD,EAaEA,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEN,WAAYK,EAAME,OAdtC,uDAKE,WACEL,SAASM,iBAAiB,UAAWC,KAAKL,eAN9C,oBAiBE,WACE,IAAQJ,EAAeS,KAAKV,MAApBC,WAER,OACE,qBAAKU,UAAU,MAAf,SACE,mBAAGA,UAAU,eAAb,SAEIV,EAAU,mCACsBA,EADtB,KAEN,kCA1BhB,GAAyBW,IAAMC,W,MCD/BC,IAASC,OACP,cAAC,EAAD,IACAZ,SAASa,eAAe,W","file":"static/js/main.0f157d0f.chunk.js","sourcesContent":["import React from 'react';\n\ntype State = {\n  pressedKey: string,\n};\n\nexport class App extends React.Component<{}, State> {\n  state: Readonly<State> = {\n    pressedKey: '',\n  };\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.saveKeyDown);\n  }\n\n  componentWillUnmount = () => {\n    document.removeEventListener('keydown', this.saveKeyDown);\n  };\n\n  saveKeyDown = (event: KeyboardEvent) => {\n    this.setState({ pressedKey: event.key });\n  };\n\n  render() {\n    const { pressedKey } = this.state;\n\n    return (\n      <div className=\"App\">\n        <p className=\"App__message\">\n          {\n            pressedKey\n              ? `The last pressed key is [${pressedKey}]`\n              : 'Nothing was pressed yet'\n          }\n        </p>\n      </div>\n    );\n  }\n}\n","import ReactDOM from 'react-dom';\r\nimport { App } from './App';\r\n\r\nimport './index.scss';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}